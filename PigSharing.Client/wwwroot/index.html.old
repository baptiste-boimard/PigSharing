<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PigSharing</title>
    <base href="/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="css/app.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <link href="manifest.webmanifest" rel="manifest" />
    <link rel="apple-touch-icon" sizes="512x512" href="icon-512.png" />
    <link rel="apple-touch-icon" sizes="192x192" href="icon-192.png" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" crossorigin="anonymous">
    <link href="_framework/blazor.webassembly.js" rel="preload" as="script" />
<!--    <script src="service-worker.js"></script>-->
</head>

<body>
    <app>
        <component type="typeof(App)" render-mode="WebAssemblyPrerendered" />
    </app>
    
    <div id="app">
        <svg class="loading-progress">
            <circle r="40%" cx="50%" cy="50%" />
            <circle r="40%" cx="50%" cy="50%" />
        </svg>
        <div class="loading-progress-text"></div>
    </div>

    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div>
    
    <script src="_framework/blazor.webassembly.js"></script>
    <script src="service-worker-registration.js"></script>
    
<!--    <script>navigator.serviceWorker.register('./service-worker.js');</script>-->
    
<!--    Permet de similer un click sur element de la page-->
    <script>
        window.triggerFileInputClick = function () {
            document.getElementById('fileInput').click();
        };
    </script>
<!--    Script pour permettre le drag and drop sur toute la page-->
    <script>
        window.initializeGlobalDropzone = (dotNetHelper) => {
            document.addEventListener('dragover', (event) => {
                event.preventDefault();
            });
            document.addEventListener('drop', async (event) => {
                event.preventDefault();
                const files = event.dataTransfer.files;
                if (files.length > 0) {
                    const file = files[0];
                    const reader = new FileReader();

                    reader.onload = (e) => {
                        const base64Image = e.target.result.split(',')[1];
                        dotNetHelper.invokeMethodAsync('OnImageDropped', base64Image, file.name, file.type);
                    };

                    reader.readAsDataURL(file);
                }
            });
        };
    </script>
</body>
</html>
