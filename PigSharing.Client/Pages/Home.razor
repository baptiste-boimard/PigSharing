@page "/"

@using Blazored.LocalStorage
@using PigSharing.Client.Logic
@using PigSharing.Client.Models

@inject StateManager StateManager
@inject NavigationManager Navigation
@inject HttpClient Client
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject ImageService ImageService

@implements IDisposable

<PageTitle>Home</PageTitle>

@* Affichage de la notification de suppression *@
@if (!string.IsNullOrEmpty(notificationMessage))
{
   <div class="notification">
      @notificationMessage
   </div>
}

@* Affichage des miniatures publics *@
<div>
   @if (!StateManager.UserConnected)
   {
      imagesShowed = StateManager.Publics;
   }
   else
   {
      if (StateManager.TogglePublics)
      {
         imagesShowed = StateManager.Publics;
      }
      else
      {
         imagesShowed = StateManager.AllImages;
      }
   }
   
   @if (imagesShowed != null)
   {

      var groupedImages = imagesShowed
         .OrderByDescending(p => p.Created)
         .GroupBy(p => new { p.Created.Year, p.Created.Month })
         .ToArray();
      
      @foreach (var group in groupedImages)
      {
         @* Séparateur avec le nom du mois et l'année *@
         <h7 style="margin-bottom: 5px">@group.Key.Month / @group.Key.Year</h7>
         <hr style="border: 1px solid black; margin-bottom: 20px; margin-top: 0px" />

         <div style="
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-bottom: 20px">
            @foreach (var picture in group)
            {
               <div style="
               display: inline-block;
               margin: 5px;
               padding: 0;
               border: none">
                  
                  <div style="
            display: flex;
            flex-direction: column">

                     <div style="display: flex; justify-content: space-around">
                        <img
                           src="@picture.Url"
                           alt="Photo publique"
                           style="width: 100px; height: 100px; margin: 0px"
                           @onclick="() => ShowLargePhoto(picture.Url)"
                           id="@picture.Id"/>
                     </div>

                     @if (StateManager.UserConnected && StateManager.ToggleAllImagePrivate)
                     {
                        <div style="text-align: center; width: 100px; margin-top: 5px; display: flex; flex-direction: row; justify-content: space-around">
                           <button style="background-color: @(picture.Private ? "transparent" : "#15b0d3"); color: @(picture.Private ? "#15b0d3" : "white"); border: solid 1px #15b0d3" @onclick="() => SetPictureStatus(picture, false, localStorageAccount)">
                              <i class="fas fa-lock-open"></i>
                           </button>
                           <button style="background-color: @(picture.Private ? "#15b0d3" : "transparent"); color: @(picture.Private ? "white" : "#15b0d3");border: solid 1px #15b0d3" @onclick="() => SetPictureStatus(picture, true, localStorageAccount)">
                              <i class="fas fa-lock"></i>
                           </button>
                           <button @onclick="() => DeletePhoto(picture, localStorageAccount)" style="background-color: transparent; cursor: pointer; border: 1px solid #15b0d3">
                              <i class="fas fa-trash" style="color: #15b0d3;"></i>
                           </button>
                        </div>
                     }
                     <div>
                        <button @onclick="() => CopyUrlToClipboard(picture.Url)" style="background-color: transparent; cursor: pointer; color: #15b0d3; font-size: 12px; width: 100px; display: flex; justify-content: space-around; margin-top: 5px; align-items: center; border: solid 1px #15b0d3">
                           <i class="fas fa-copy" style="color: #15b0d3;"></i>
                           Copier Url
                        </button>
                     </div>
                  </div>
               </div>
            }                  
         </div>
      }
   }
</div>

@* Affichage en grand de la photo *@
@if (largeImageUrl != null)
{
   <div class="modal" @onclick="CloseLargePhoto" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center">
      <img src="@largeImageUrl" alt="Large Photo" style="max-width: 90%; max-height: 90%" />
   </div>
}

@code
{
   private IBrowserFile? selectedFile;
   // private Picture[] publics;
   
   private Picture[]? imagesShowed = new Picture[]{};

   private Account? localStorageAccount; 
   
   private string largeImageUrl;
   private Picture? picture = new Picture();
   private string notificationMessage;
   
   // Methode qui permet de suivre les chnagement dans le StateManager
   protected async override void OnInitialized()
   {
      // Passage à l'état connecté ou non
      var account = await LocalStorage.GetItemAsync<Account>("account");
      localStorageAccount = account;
      
      if (account != null)
      {
         StateManager.UserConnected = true;
         await ImageService.GetAllImages(account);
         StateHasChanged();
      }
      else
      {
         StateManager.UserConnected = false;
         await ImageService.GetPublics();
         StateHasChanged();
      }
      
      StateManager.OnChange += StateHasChanged;
   }
   
   // Détruit l'event d'écoute quand le composant est detruit
   // ????????????????? UTILE ICI JE PENSE PAS ????????????
   public void Dispose()
   {
      StateManager.OnChange -= StateHasChanged;
   }
   
   // Ouvrir la photo en grand
   private void ShowLargePhoto(string url)
   {
      largeImageUrl = url;
      StateHasChanged();
   }

   // Fermer la photo en grand
   private void CloseLargePhoto()
   {
      largeImageUrl = null;
      StateHasChanged();
   }
   
   // Permet de supprimer une image
   private async Task DeletePhoto(Picture picture, Account account)
   {
      var response = await Client.PostAsJsonAsync($"/api/picture/deleteimage", picture);
      
      if (response.IsSuccessStatusCode)
      {
         await ImageService.GetAllImages(account);
         await ImageService.GetPublics();
         Navigation.NavigateTo("/");
         StateHasChanged();
      }
   }
   
   // Permet de changer le status de l'image Private/Publique
   private async Task SetPictureStatus(Picture picture, bool isPrivate, Account account)
   {
      picture.Private = isPrivate;
      
      try
      {
         var response = await Client.PutAsJsonAsync($"/api/picture/updatestatus", picture);

         if (response.IsSuccessStatusCode)
         {
            await ImageService.GetAllImages(account);
            await ImageService.GetPublics();
         }
         else
         {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error updating picture status: {errorMessage}");
         }
      }
      catch (Exception e)
      {
         Console.WriteLine(e);
         throw;
      }
      
   }
   
   // Permet de copier l'URL de l'image dans le presse papier
   private async Task CopyUrlToClipboard(string url)
   {
      await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", url);
   }
}